[tool.poetry]
name = "string-scorer"
version = "0.1.0"
description = "Simple API which takes an input string, scores it using various machine learning models, and returns the scores."
authors = ["Andrew Beveridge <andrew@beveridge.uk>"]
readme = "README.md"
license = "MIT"
packages = [{ include = "string_scorer" }]
homepage = "https://github.com/beveradb/string-scorer"
repository = "https://github.com/beveradb/string-scorer"
documentation = "https://github.com/beveradb/string-scorer/blob/main/README.md"
keywords = ["AI", "ML", "machine-learning", "text", "scoring"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Indexing",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poe.tasks.start-database]
cmd = "docker compose up -d stringscorerdb"

[tool.poe.tasks.build-frontend]
cmd = "npm run build"
cwd = "string_scorer/frontend"

[tool.poe.tasks.run-server]
env = { DATABASE_HOST = "localhost" }
script = "string_scorer.server:start_local_dev_server"

[tool.poe.tasks.start]
sequence = [
    { ref = "start-database" },
    { ref = "build-frontend" },
    { ref = "run-server" },
]

[tool.poe.tasks.stop]
sequence = [{ cmd = "pkill -f 'python'" }, { cmd = "docker compose down" }]

[tool.poe.tasks.test]
help = "Run pytest unit tests followed by integration tests."
sequence = [
    { cmd = "pytest tests/unit --cov=string_scorer" },
    { cmd = "pytest tests/integration" },
]

[tool.poetry.dependencies]
python = ">=3.10"
flask = "^3.0.2"
flask-sqlalchemy = "^3.1.1"
psycopg2-binary = "^2.9.9"
flask-socketio = "^5.3.6"
gunicorn = "^21.2.0"
eventlet = "^0.35.1"
sentence-transformers = "^2.3.1"
detoxify = "^0.5.2"

[tool.poetry.group.dev.dependencies]
black = ">=23"
pytest = "*"
pytest-cov = "^4.1.0"

[tool.black]
line-length = 200

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
